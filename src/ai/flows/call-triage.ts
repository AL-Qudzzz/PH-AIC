// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Implements the AI call triage flow for transcribing and understanding emergency calls in Bahasa Indonesia.
 *
 * - callTriage - A function that handles the call triage process.
 * - CallTriageInput - The input type for the callTriage function.
 * - CallTriageOutput - The return type for the callTriage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CallTriageInputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      "The audio data of the emergency call as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type CallTriageInput = z.infer<typeof CallTriageInputSchema>;

const CallTriageOutputSchema = z.object({
  transcript: z
    .string()
    .describe('The transcribed text of the emergency call.'),
  emergencyType: z
    .string()
    .describe('The identified type of emergency (e.g., medical, fire, police).'),
  keyDetails: z
    .string()
    .describe('Key details extracted from the call, such as location and nature of the emergency.'),
  latitude: z.number().describe('The estimated latitude of the incident location.'),
  longitude: z.number().describe('The estimated longitude of the incident location.'),
});
export type CallTriageOutput = z.infer<typeof CallTriageOutputSchema>;

export async function callTriage(input: CallTriageInput): Promise<CallTriageOutput> {
  return callTriageFlow(input);
}

const callTriagePrompt = ai.definePrompt({
  name: 'callTriagePrompt',
  input: {schema: CallTriageInputSchema},
  output: {schema: CallTriageOutputSchema},
  prompt: `You are an AI assistant designed to triage emergency calls in Bahasa Indonesia. The location is strictly within Jakarta or Tangerang Selatan, Indonesia. Your primary goal is to provide highly accurate geographical coordinates.

  1.  Transcribe the provided audio data.
  2.  Identify the type of emergency being reported (e.g., medical, fire, police).
  3.  Extract key details from the call, focusing on the precise location.
  4.  Estimate the geographical coordinates (latitude and longitude) with the highest possible accuracy (99% target). Treat this as a critical step for dispatching emergency services.
  5.  Present all information in Bahasa Indonesia.
  
  Example 1:
  - Input: Audio saying "Tolong, ada kebakaran di gedung tinggi dekat Bundaran HI."
  - Output: {
      "transcript": "Tolong, ada kebakaran di gedung tinggi dekat Bundaran HI.",
      "emergencyType": "Fire",
      "keyDetails": "Kebakaran di gedung tinggi dekat Bundaran HI.",
      "latitude": -6.1944,
      "longitude": 106.8229
    }

  Example 2:
  - Input: Audio saying "Saya butuh ambulans, ada kecelakaan motor di depan SCBD."
  - Output: {
      "transcript": "Saya butuh ambulans, ada kecelakaan motor di depan SCBD.",
      "emergencyType": "Medical",
      "keyDetails": "Kecelakaan motor di depan SCBD.",
      "latitude": -6.2244,
      "longitude": 106.8078
    }
  
  Example 3 (High Precision):
  - Input: Audio saying "Ada perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang."
  - Output: {
      "transcript": "Ada perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang.",
      "emergencyType": "Police",
      "keyDetails": "Perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang.",
      "latitude": -6.2163,
      "longitude": 106.6267
  }


  Audio Data: {{media url=audioDataUri}}

  Output:
  - Transcript: (The full transcription of the call)
  - Emergency Type: (The identified type of emergency)
  - Key Details: (Important details such as location, specific problem, etc.)
  - Latitude: (Highly accurate estimated latitude)
  - Longitude: (Highly accurate estimated longitude)
  `,
});

const callTriageFlow = ai.defineFlow(
  {
    name: 'callTriageFlow',
    inputSchema: CallTriageInputSchema,
    outputSchema: CallTriageOutputSchema,
  },
  async input => {
    const {output} = await callTriagePrompt(input);
    return output!;
  }
);
