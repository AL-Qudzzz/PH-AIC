// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Implements the AI call triage flow for transcribing and understanding emergency calls in Bahasa Indonesia.
 *
 * - callTriage - A function that handles the call triage process.
 * - CallTriageInput - The input type for the callTriage function.
 * - CallTriageOutput - The return type for the callTriage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CallTriageInputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      "The audio data of the emergency call as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type CallTriageInput = z.infer<typeof CallTriageInputSchema>;

const CallTriageOutputSchema = z.object({
  transcript: z
    .string()
    .describe('The transcribed text of the emergency call.'),
  emergencyType: z
    .string()
    .describe('The identified type of emergency (e.g., medical, fire, police).'),
  keyDetails: z
    .string()
    .describe('Key details extracted from the call, such as location and nature of the emergency.'),
});
export type CallTriageOutput = z.infer<typeof CallTriageOutputSchema>;

export async function callTriage(input: CallTriageInput): Promise<CallTriageOutput> {
  return callTriageFlow(input);
}

const callTriagePrompt = ai.definePrompt({
  name: 'callTriagePrompt',
  input: {schema: CallTriageInputSchema},
  output: {schema: CallTriageOutputSchema},
  prompt: `You are an AI assistant designed to triage emergency calls in Bahasa Indonesia.

  1.  Transcribe the provided audio data.
  2.  Identify the type of emergency being reported (e.g., medical, fire, police).
  3.  Extract key details from the call, including the location and nature of the emergency.
  4.  Present all information in Bahasa Indonesia.

  Audio Data: {{media url=audioDataUri}}

  Output:
  - Transcript: (The full transcription of the call)
  - Emergency Type: (The identified type of emergency)
  - Key Details: (Important details such as location, specific problem, etc.)`,
});

const callTriageFlow = ai.defineFlow(
  {
    name: 'callTriageFlow',
    inputSchema: CallTriageInputSchema,
    outputSchema: CallTriageOutputSchema,
  },
  async input => {
    const {output} = await callTriagePrompt(input);
    return output!;
  }
);
