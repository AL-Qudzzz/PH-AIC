// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Implements the AI call triage flow for transcribing and understanding emergency calls in Bahasa Indonesia.
 *
 * - callTriage - A function that handles the call triage process.
 * - CallTriageInput - The input type for the callTriage function.
 * - CallTriageOutput - The return type for the callTriage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CallTriageInputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      "The audio data of the emergency call as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type CallTriageInput = z.infer<typeof CallTriageInputSchema>;

const CallTriageOutputSchema = z.object({
  transcript: z
    .string()
    .describe('The transcribed text of the emergency call.'),
  emergencyType: z
    .string()
    .describe('The identified type of emergency (e.g., medical, fire, police).'),
  keyDetails: z
    .string()
    .describe('Key details extracted from the call, such as location and nature of the emergency.'),
  latitude: z.number().describe('The estimated latitude of the incident location.'),
  longitude: z.number().describe('The estimated longitude of the incident location.'),
});
export type CallTriageOutput = z.infer<typeof CallTriageOutputSchema>;

export async function callTriage(input: CallTriageInput): Promise<CallTriageOutput> {
  return callTriageFlow(input);
}

const callTriagePrompt = ai.definePrompt({
  name: 'callTriagePrompt',
  input: {schema: CallTriageInputSchema},
  output: {schema: CallTriageOutputSchema},
  prompt: `You are an AI assistant for the SIAGA 112 emergency service, specialized in triaging calls in Bahasa Indonesia. Your most critical function is to determine the precise geographical coordinates from the caller's description for immediate dispatch of emergency units. The location will ALWAYS be within the province of DKI Jakarta, Indonesia. Do not guess locations outside this area.

  Your tasks are, in order of importance:
  1.  **Pinpoint Location Coordinates**: From the audio, extract the location description and convert it into the most accurate geographical coordinates (latitude and longitude) possible. This is a life-or-death instruction. The accuracy of the OSM map marker depends entirely on your output. Do not provide a rough estimate; provide the most precise coordinates you can determine.
  2.  **Transcribe Audio**: Provide a full and accurate transcription of the call.
  3.  **Identify Emergency Type**: Classify the emergency (e.g., Medical, Fire, Police).
  4.  **Extract Key Details**: Summarize the incident and the location in a single phrase.
  5.  **Language**: All text output must be in Bahasa Indonesia.
  
  Example 1 (Landmark):
  - Input: Audio saying "Tolong, ada kebakaran di gedung tinggi dekat Bundaran HI."
  - Output: {
      "transcript": "Tolong, ada kebakaran di gedung tinggi dekat Bundaran HI.",
      "emergencyType": "Fire",
      "keyDetails": "Kebakaran di gedung tinggi dekat Bundaran HI.",
      "latitude": -6.1944,
      "longitude": 106.8229
    }

  Example 2 (Specific Address - High Accuracy Required):
  - Input: Audio saying "Ada perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang."
  - Output: {
      "transcript": "Ada perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang.",
      "emergencyType": "Police",
      "keyDetails": "Perampokan di Jalan Cisadane nomor 15, Cikokol, Tangerang.",
      "latitude": -6.2163,
      "longitude": 106.6267
  }
  
  Example 3 (Intersection):
  - Input: Audio saying "Saya butuh ambulans, ada kecelakaan motor di perempatan dekat SCBD."
  - Output: {
      "transcript": "Saya butuh ambulans, ada kecelakaan motor di perempatan dekat SCBD.",
      "emergencyType": "Medical",
      "keyDetails": "Kecelakaan motor di perempatan dekat SCBD.",
      "latitude": -6.2244,
      "longitude": 106.8078
    }
  
  Example 4 (General Area - Pinpoint as accurately as possible):
  - Input: Audio saying "Ada orang pingsan di area Monas."
  - Output: {
      "transcript": "Ada orang pingsan di area Monas.",
      "emergencyType": "Medical",
      "keyDetails": "Orang pingsan di area Monas.",
      "latitude": -6.1754,
      "longitude": 106.8271
    }

  Audio Data: {{media url=audioDataUri}}

  Provide your analysis in the specified JSON format.
  `,
});

const callTriageFlow = ai.defineFlow(
  {
    name: 'callTriageFlow',
    inputSchema: CallTriageInputSchema,
    outputSchema: CallTriageOutputSchema,
  },
  async input => {
    const {output} = await callTriagePrompt(input);
    return output!;
  }
);
